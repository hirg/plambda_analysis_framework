#ifndef CONSTANTS_H
#define CONSTANTS_H
#include <math.h>

//TODO: add an additional bad run from gang bad run
const Double_t PI = atan2(1.0, 1.0) * 4.0;
const Int_t order = 4;
const Int_t correction_terms = 2 * order;
const Int_t phiBins = 80;
const Double_t PVZCut = 40.;
const Double_t EtaCut = 1.0;
const Double_t DcaCut = 2.0; //TODO: Dca Global cut to select primary tracks?
const Double_t pt_trig_up = 2.0;
const Double_t pt_trig_low = .15;

const int bad_Ref_day2_auau200GeV[12] = {13703,13800,13802,14005,14107,14301,14307,14600,15901,16304,16407,16705};
const int bad_Ref_day2_auau39GeV[30] = [10902,11103,11107,10207, 10103,10204, 10205, 10604, 11106, 10003, 10202, 10601, 9910, 10104,10000,10907,11004,10600,11102,10201,10900,11009,10709,10206,10009,10708,10106,10505,10602,11008];
const int Nrun_MB1 = 134;
const int Nrun_MB2 = 60;
const int Nrun_MB5 = 107;
const int Nrun_MB6 = 42;
const Int_t ZDC_COINCIDENCE_RATE = 27000; 

// Run11 AuAu200GeV Collisions
const int bad_Ref_day3_MB1_auau200GeV[Nrun_MB1] = {133010,133011,133022,133027,133028,134065,127019,128021,133020,137004,127039,132024,132025,132026,132032,127020,127048,127049,128028,128029,128030,128031,128032,132052,133041,136039,127002,132061,134017,134063,135004,135039,137020,127030,128007,132062,133005,133039,133040,133053,133054,134006,134007,134018,134026,134028,134038,134041,135019,135020,135045,135057,136007,136032,136064,137010,127009,127046,128038,132019,132022,132044,132045,133002,133019,133038,133052,134005,134040,134055,135002,135033,135048,135049,136069,137003,127021,127022,127023,127024,128024,128025,132020,132021,132023,132033,132048,132051,132057,132063,132065,133021,134008,135012,135021,135024,135030,135054,136044,136081,136086,127003,127010,127011,127017,127018,127032,132009,132034,132043,132066,132069,133018,134023,134057,136005,136006,136014,136017,136022,136023,136024,136025,136027,136028,136029,136030,136031,136034,136053,136054,136070,136071,138017}; //MB1
const int bad_Ref_day3_MB2_auau200GeV[Nrun_MB2] = {139032,139043,139044,139045,142002,139042,140021,140029,142063,142064,142065,144004,138081,138082,138087,138088,138089,138090,138091,139002,139003,139006,139007,139008,139009,139010,139015,139016,139017,139018,139021,142016,142033,142061,142062,144051,138092,139019,139020,140016,140020,141003,141004,141026,141062,141065,142001,142013,142023,142034,142046,142068,142076,143009,143024,143058,144016,144028,144033,145003}; //MB2
const int bad_Ref_day3_MB5_auau200GeV[Nrun_MB5] = {155050,155056,158010,165028,154043,154044,154045,155058,158069,158070,158072,158073,164067,154046,154047,155008,155009,156015,156062,156063,158074,162015,154067,155002,155012,155047,156008,156009,157023,157030,157052,158006,159023,160021,161006,161015,161060,162004,162028,162034,163024,163058,164009,164056,164066,164089,165013,154048,154066,155011,155021,155038,155051,155060,155062,155064,156004,156035,156056,157012,157014,157031,157038,157051,158015,158021,158026,158040,158041,158051,158054,158056,158057,158058,158061,159005,159021,159022,159024,160016,160025,161007,161014,161017,161020,161022,161053,162017,162030,162035,162055,162056,162057,162058,163006,163008,163015,164011,164037,164043,164086,165001,165003,165005,165007,165026,165031}; //MB5
const int bad_Ref_day3_MB6_auau200GeV[Nrun_MB6] = {166051,170016,167014,170034,170050,170051,171009,171015,167049,168010,169028,169032,170007,165042,166052,166059,167002,167040,167048,169031,169059,170009,170012,170018,170020,170031,171004,171014,166002,166003,167015,167024,168009,168022,168060,168077,169033,169034,170044,170045,170054,170056}; //MB6

// Particle mass data
const Float_t ProtonPDGMass = 0.938272013;
const Float_t LambdaPDGMass = 1.115683;

// Primary Tracks(used for event plane reconstruction) Cuts
struct priCuts{
    priCuts():Pt_LowerLimit(0.15), Pt_UpperLimit(2.0), DCAGlobal_UpperLimit(2.0){}
    Float_t Pt_LowerLimit;
    Float_t Pt_UpperLimit;
    Float_t DCAGlobal_UpperLimit;
}PrimaryTrkCuts;

// Proton Cuts 
struct alphaCuts{
    alphaCuts(): Pt_LowerLimit(0.4), Pt_UpperLimit(2.0), nSigma_UpperLimit(2.0), nSigma_LowerLimit(-2.0), DCAGlobal_UpperLimit(1.0), m2_UpperLimit(1.0), m2_LowerLimit(0.8){}
    Float_t Pt_LowerLimit;  // 0.15 for primary
    Float_t Pt_UpperLimit;  // Beyond this point, we cannot distinguish proton very well. Even from TOF 
    Float_t nSigma_UpperLimit;
    Float_t nSigma_LowerLimit;
    Float_t DCAGlobal_UpperLimit;
    Float_t m2_UpperLimit;
    Float_t m2_LowerLimit;
}ProtonCuts;

// Lambda Cuts
struct betaCuts{
    betaCuts(): ParentPt_LowerLimit(.5), ParentPt_UpperLimit(5.0), Dau1nSigma_UpperLimit(3.0), Dau2nSigma_UpperLimit(3.0), 
                DecayLen_LowerLimit(6.0), ParentDCAGlobal_UpperLimit(0.6), Dau1DCA_LowerLimit(0.6), Dau2DCA_LowerLimit(1.8),
                DCA1to2_UpperLimit(0.7), ParentMassWidth_UpperLimit(0.004){}
    Float_t ParentPt_LowerLimit; 
    Float_t ParentPt_UpperLimit;
    Float_t Dau1nSigma_UpperLimit;
    Float_t Dau2nSigma_UpperLimit;
    Float_t DecayLen_LowerLimit;
    Float_t ParentDCAGlobal_UpperLimit;
    Float_t Dau1DCA_LowerLimit; // Proton DCA
    Float_t Dau2DCA_LowerLimit; // Pion DCA
    Float_t DCA1to2_UpperLimit;
    Float_t ParentMassWidth_UpperLimit;
}LambdaCuts;
#endif
